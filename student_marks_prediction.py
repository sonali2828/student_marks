# -*- coding: utf-8 -*-
"""student_marks_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1zCZFcI_6n1SvBIyBWaFKhHA2W9YxUx
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

df = pd.read_csv(io.BytesIO(uploaded['Student Performance Predictor for EduQuest Coaching.csv']))

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Step 1: Input (X) à¤”à¤° Output (y) à¤•à¥‹ à¤…à¤²à¤— à¤•à¤°à¥‹
X = df[['learning_hours_per_week']]
y = df['final_exam_score']

# Step 2: Train-Test Split (80% Train, 20% Test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Step 3: Model Create & Train
model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Step 1: Predictions
y_pred = model.predict(X_test)

# Step 2: Accuracy Check
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("ðŸ“‰ Mean Squared Error:", mse)
print("âœ… R2 Score (Accuracy):", r2)

# Step 3: Graph Plot
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel("Hours Studied")
plt.ylabel("Score")
plt.title("Actual vs Predicted Scores")
plt.legend()
plt.grid(True)
plt.show()

hours = [[8.0]]  # 8 à¤˜à¤‚à¤Ÿà¥‡ à¤ªà¤¢à¤¼à¤¨à¥‡ à¤ªà¤°
predicted_score = model.predict(hours)
print(f"ðŸŽ¯ Predicted Score for 8 hours: {predicted_score[0]}")

